
import random
from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext


import app.keyboards as kb
import app.database.requests as rq

import os
from dotenv import load_dotenv

load_dotenv()

ADMIN_ID = int(os.getenv('ADMIN_ID',0))
SUPPORT_ID = int(os.getenv('SUPPORT_ID',0))

router = Router()


class AddItem(StatesGroup):
    name = State()
    description = State()
    price = State()
    product = State()
    photo = State()
    item_file_id = State()
    confirm = State()

class AddMaterial(StatesGroup):
    name = State()
    description = State()
    file_id = State()
    item_id = State()

class GetDocument(StatesGroup):
    doc_id = State()

class SendDocument(StatesGroup):
    send_doc_id = State()

class GetPhoto(StatesGroup):
    photo_id = State()

class SendPhoto(StatesGroup):
    send_photo_id = State()

class BuyItem(StatesGroup):
    proof = State()

class GetMessage(StatesGroup):
    text_id = State()

class SearchItem(StatesGroup):
    search_id = State()
    search_name = State()

class SearchAllItem(StatesGroup):
    search_name_all = State()

class Promocode(StatesGroup):
    promocode = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    
    isNew = await rq.set_user(message.from_user.id)

    if isNew:
        await message.bot.send_message(
            ADMIN_ID,
            f"<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}\n"
            f"–ò–º—è: {message.from_user.full_name}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}",
            parse_mode="HTML"
        )

    if message.from_user.id == ADMIN_ID:
        await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
                            parse_mode="HTML",
                            reply_markup=kb.main_admin)
        
    elif message.from_user.id == SUPPORT_ID:
        await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å Support.",
                            parse_mode="HTML",
                            reply_markup=kb.main_admin)
    
    else:
        await message.answer_photo(photo='AgACAgIAAxkBAAMNZ9IEChbnZcD4iui7Whd_byZsz3gAAqTtMRviKJBKcE2KI1-H-8YBAAMCAAN5AAM2BA',
                        caption='üëã<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.</b>\n\n–í–ø–µ—Ä–≤—ã–µ —É –Ω–∞—Å? –¢–æ–≥–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Å—è üëá\n\n–ú—ã –ø—Ä–æ–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã –∫–∞–∫ –∏ <b>–¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</b>, —Ç–∞–∫ –∏ <b>–¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –∏ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤</b> –ø–æ <b>–¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º</b>. –í –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–Ω–∏–∑—É –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é.\n\n<b>üî• –£–¥–∞—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫!</b>',
                         parse_mode="HTML", 
                         reply_markup=kb.main)




@router.message(F.text == "üõ†Ô∏è –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üõ†Ô∏è")
async def cmd_admin_commands(message : Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    await message.answer('–°–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥:\n\n<code>/get_users</code> - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n<code>/add_new_item</code> - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä\n\n<code>/add_new_material</code> - –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∫ —Ç–æ–≤–∞—Ä—É\n\n<code>/get_document</code> - –ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ ID\n\n<code>/send_document</code> - –°–∫–∏–¥—ã–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID\n\n<code>/confirm_order [ID –∑–∞–∫–∞–∑–∞]</code> - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID\n\n<code>/cancel_order [ID –∑–∞–∫–∞–∑–∞]</code> - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID\n\n<code>/get_photo</code> - –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ ID\n\n<code>/get_document</code> - –ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ ID\n\n<code>/send_photo</code> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID\n\n<code>/send_document</code> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID',
                         parse_mode="HTML",
                         reply_markup=kb.admin_commands)

@router.message(Command("get_users"))
async def get_users_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    users = await rq.get_all_users()

    if not users:
        return await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    MAX_LENGTH = 4000
    text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    messages_to_send = []

    for i, user in enumerate(users, 1):
        try:
            chat = await message.bot.get_chat(user.tg_id)
            username = f"@{chat.username}" if chat.username else "‚Äî"
            full_name = chat.full_name or "‚Äî"
        except Exception as e:
            username = "‚Äî"
            full_name = "‚Äî"

        user_info = (
            f"<b>{i}.</b> ID: <code>{user.tg_id}</code>\n"
            f"üë§ Username: {username}\n"
            f"üìù Fullname: {full_name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '‚Äî'}\n"
            f"üéÅ –ü—Ä–æ–º–æ: {user.is_promo}\n"
            f"–ë—ã–ª –ø—Ä–æ–º–æ: {user.was_promo}\n"
            f"üîñ –ü—Ä–æ–º–æ–∫–æ–¥: {user.promocode or '‚Äî'}\n\n"
        )

        if len(text) + len(user_info) > MAX_LENGTH:
            messages_to_send.append(text)
            text = ""
        text += user_info

    if text:
        messages_to_send.append(text)

    for part in messages_to_send:
        await message.answer(part, parse_mode="HTML")



@router.message(Command('add_new_item'))
async def cmd_add_item(message: Message, state : FSMContext):

    if message.from_user.id != ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    await state.set_state(AddItem.name)
    await message.reply("–ù–∞–∑–æ–≤–∏—Ç–µ –≤–∞—à —Ç–æ–≤–∞—Ä", reply_markup=kb.cancel_add)

@router.message(AddItem.name)
async def name_of_item(message: Message, state: FSMContext):

    name_text = message.text

    if len(name_text) > 100:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return 
    
    await state.update_data(name=message.text)
    await state.set_state(AddItem.description)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞', reply_markup=kb.cancel_add)

@router.message(AddItem.description)
async def description_of_item(message: Message, state: FSMContext):

    description_text = message.text

    if len(description_text) > 250:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –¥–æ 250 —Å–∏–º–≤–æ–ª–æ–≤.")
        return 
    
    await state.update_data(description=message.text)
    await state.set_state(AddItem.price)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞', reply_markup=kb.cancel_add)

@router.message(AddItem.price)
async def price_of_item(message: Message, state: FSMContext):
    
    try:
        await state.update_data(price=int(message.text))
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑ (—Ü–∏—Ñ—Ä—É)')
        return
    
    all_products = await rq.get_products()
    product_name = ""
    for product in all_products:
        product_name = product_name + "["+str(product.id) + "]" + " " + product.name + "\n"
    
    await state.set_state(AddItem.product)
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ id –¥–ª—è –∫–∞–∫–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞—à —Ç–æ–≤–∞—Ä\n\n{product_name}', reply_markup=kb.cancel_add)
    
@router.message(AddItem.product)
async def item_to_product(message : Message, state: FSMContext):
    
    try:
        await state.update_data(product=int(message.text))
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑')
        return

    await state.set_state(AddItem.photo)
    await message.answer('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞', reply_markup=kb.cancel_add)

# @router.message(AddItem.photo, F.photo)
# async def item_photo(message: Message, state: FSMContext):
#     if message.text == "–ù–µ—Ç—É —Ñ–æ—Ç–æ":
#         await state.update_data(photo="")
#     else:
#         try:
#             await state.update_data(photo=message.photo[-1].file_id)
#         except:
#             await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑')
#             return
#     data = await state.get_data()
#     await rq.set_item(data)
#     await message.answer(f'‚úÖ –°–ø–∞—Å–∏–±–æ, —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.')
#     await state.clear()

@router.message(AddItem.photo, F.photo)
async def item_photo(message: Message, state: FSMContext):
    if message.text == "–ù–µ—Ç—É —Ñ–æ—Ç–æ":
        await state.update_data(photo="")
    else:
        try:
            await state.update_data(photo=message.photo[-1].file_id)
        except:
            await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑')
            return
    await state.set_state(AddItem.item_file_id)
    await message.answer('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ñ–∞–π–ª', reply_markup=kb.cancel_add)

@router.message(AddItem.item_file_id, F.document)
async def add_item_document_material(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ
    data = await state.get_data()
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è file_id
    if 'file_ids' not in data:
        file_ids = []
    else:
        file_ids = data['file_ids']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫
    file_ids.append(message.document.file_id)
    await state.update_data(file_ids=file_ids)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(file_ids) == 1:
        await message.answer('–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª.')
    else:
        await message.answer(f'–î–æ–±–∞–≤–ª–µ–Ω–æ {len(file_ids)} —Ñ–∞–π–ª–æ–≤.')

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é (ID –º–∞—Ç–µ—Ä–∏–∞–ª–∞)
    await state.set_state(AddItem.confirm)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ <code>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é</code> –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞', 
                         reply_markup=kb.cancel_add,
                         parse_mode="HTML")

@router.message(AddItem.confirm)
async def confirm_material(message:Message,state:FSMContext):
    if message.text == '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é':
        data = await state.get_data()
        await rq.set_item(data)
        get_item_last = await rq.get_item_to_add()
        await rq.set_item_material(data,get_item_last.id)
        await message.answer(f'‚úÖ –°–ø–∞—Å–∏–±–æ, —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.')
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ <code>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é</code> –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞', 
                             reply_markup=kb.cancel_add,
                             parse_mode="HTML")


@router.message(Command('add_new_material'))
async def cmd_add_material(message: Message, state : FSMContext):

    if message.from_user.id != ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    await state.set_state(AddMaterial.name)
    await message.reply("–ò–º—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞", reply_markup=kb.cancel_add)

@router.message(AddMaterial.name)
async def name_of_material(message: Message, state: FSMContext):
    
    await state.update_data(name=message.text)
    await state.set_state(AddMaterial.description)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞', reply_markup=kb.cancel_add)

@router.message(AddMaterial.description)
async def name_of_item(message: Message, state: FSMContext):
    
    await state.update_data(description=message.text)
    await state.set_state(AddMaterial.file_id)
    await message.answer('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ñ–∞–π–ª', reply_markup=kb.cancel_add)

@router.message(AddMaterial.file_id, F.document)
async def document_material(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ
    data = await state.get_data()
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è file_id
    if 'file_ids' not in data:
        file_ids = []
    else:
        file_ids = data['file_ids']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫
    file_ids.append(message.document.file_id)
    await state.update_data(file_ids=file_ids)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(file_ids) == 1:
        await message.answer('–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª.')
    else:
        await message.answer(f'–î–æ–±–∞–≤–ª–µ–Ω–æ {len(file_ids)} —Ñ–∞–π–ª–æ–≤.')

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é (ID –º–∞—Ç–µ—Ä–∏–∞–ª–∞)
    await state.set_state(AddMaterial.item_id)
    all_items = await rq.get_items()
    item_name = ""
    for item in all_items:
        item_name = item_name + "[" + str(item.id) + "]" + " " + item.name + "\n"
    
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤–∞—à –º–∞—Ç–µ—Ä–∏–∞–ª\n\n{item_name}', reply_markup=kb.cancel_add)


@router.message(AddMaterial.item_id)
async def material_to_item(message : Message, state: FSMContext):
    await state.update_data(item=int(message.text))
    try:
        data = await state.get_data()
        await rq.set_material(data)
        await message.answer(f'‚úÖ –°–ø–∞—Å–∏–±–æ, –º–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.')
        await state.clear()
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑', reply_markup=kb.cancel_add)
        return
    

@router.callback_query(F.data == 'cancel_to_add')
async def cancel_to_add(callback : CallbackQuery, state : FSMContext):
    await callback.message.delete()
    await state.clear()
    await callback.message.answer('–ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω! ‚úÖ')

    


@router.message(Command('confirm_order'))
async def confirm_order(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    command_parts = message.text.split()
    if len(command_parts) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: /confirm_order [order_id]")
        return

    order_id = command_parts[1] 

    orders, materials = await rq.get_order_and_material(order_id)

    if not orders:
        await message.reply(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not materials:
        await message.reply(f"–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_id = orders[0].user_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    await rq.set_user_used_promo_false(user_id)
    await message.bot.send_message(
        user_id,
        f"–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Ç–æ–≤–∞—Ä <b>{orders[0].item_name}</b> –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ\n\n<b>–í–æ—Ç –≤–∞—à –º–∞—Ç–µ—Ä–∏–∞–ª!</b>",
        parse_mode="HTML"
    )

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    for material in materials:
        file_id = material.file_id  # –ü–æ–ª—É—á–∞–µ–º file_id –º–∞—Ç–µ—Ä–∏–∞–ª–∞

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
        await message.bot.send_document(
            user_id,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            document=file_id,  # file_id –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            caption="",  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é –ø–æ–¥–ø–∏—Å—å, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤—ã—à–µ
            parse_mode="HTML"
        )

    await message.reply(f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ <b>{order_id}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚úÖ", parse_mode="HTML")

    # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
    await rq.delete_order(order_id)

@router.message(Command('cancel_order'))
async def cancel_order(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    command_parts = message.text.split()
    if len(command_parts) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: /cancel_order [order_id]")
        return

    order_id = command_parts[1]  # –ü–æ–ª—É—á–∞–µ–º order_id –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    orders, materials = await rq.get_order_and_material(order_id)

    if not orders:
        await message.reply(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not materials:
        await message.reply(f"–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await message.reply(f"–ó–∞–∫–∞–∑ <b>{order_id}</b> —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω ‚úÖ", parse_mode="HTML")

    # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
    await rq.delete_order(order_id)


@router.message(Command('get_document'))
async def get_document(message : Message, state : FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    await state.set_state(GetDocument.doc_id)
    await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ ID –¥–æ–∫—É–º–µ–Ω—Ç–∞')

@router.message(GetDocument.doc_id)
async def get_document_by_id(message : Message, state: FSMContext):
    doc_data = message.text
    try:
        await message.answer_document(document=f"{doc_data}", caption=f"ID –¥–æ–∫—É–º–µ–Ω—Ç–∞: <code>{doc_data}</code>",
                                      parse_mode="HTML")
    except:
        await message.answer('–ù–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    await state.clear()


@router.message(Command('send_document'))
async def send_document(message : Message, state : FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    await state.set_state(SendDocument.send_doc_id)
    await message.reply('–°–∫–∏–¥—ã–≤–∞–π—Ç–µ —Ñ–∞–π–ª')

@router.message(SendDocument.send_doc_id, F.document)
async def get_document_id(message : Message, state: FSMContext):
    doc_id = message.document.file_id
    try:
        await message.answer_document(document=f"{doc_id}",caption=f"ID –¥–æ–∫—É–º–µ–Ω—Ç–∞: <code>{doc_id}</code>",
                                      parse_mode="HTML")
    except:
        await message.answer('–ù–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    await state.clear()



    
@router.message(Command('get_photo'))
async def get_photo(message : Message, state : FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return

    await state.set_state(GetPhoto.photo_id)
    await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ ID —Ñ–æ—Ç–æ')

@router.message(GetPhoto.photo_id)
async def get_photo_by_id(message : Message, state: FSMContext):
    photo_data = message.text
    try:
        await message.answer_photo(photo=f"{photo_data}",caption=f"ID —Ñ–æ—Ç–æ: <code>{photo_data}</code>",
                                   parse_mode="HTML")
    except:
        await message.answer('–ù–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    await state.clear()

@router.message(Command('send_photo'))
async def get_document(message : Message, state : FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    await state.set_state(SendDocument.send_doc_id)
    await message.reply('–°–∫–∏–¥—ã–≤–∞–π—Ç–µ —Ñ–æ—Ç–æ')

@router.message(SendDocument.send_doc_id, F.photo)
async def get_photo_id(message : Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    try:
        await message.answer_photo(photo=f"{photo_id}",caption=f"ID —Ñ–æ—Ç–æ: <code>{photo_id}</code>",
                                      parse_mode="HTML")
    except:
        await message.answer('–ù–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    await state.clear()
    


@router.message(Command('my_id'))
async def get_my_id(message : Message):
    await message.reply(f'–¢–≤–æ–π ID: {message.from_user.id}\n–ò–º—è: {message.from_user.first_name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}')





















@router.message(F.text == 'üõí –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥')
async def get_products(message : Message):
    await message.answer(text='–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ:', reply_markup=await kb.products())


@router.callback_query(F.data.startswith('product_'))
async def product(callback: CallbackQuery):
    await callback.answer("")
    product_id = callback.data.split('_')[1]
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É', 
                                     reply_markup=await kb.items(product_id, page=1))


@router.callback_query(F.data.startswith('items_'))
async def items_page(callback: CallbackQuery):
    await callback.answer("")  # –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
    data = callback.data.split('_')
    product_id = int(data[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º id —Ç–æ–≤–∞—Ä–∞
    page = int(data[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞ —Å –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞',
                                      reply_markup=await kb.items(product_id, page))


@router.callback_query(F.data.startswith('item_'))
async def item(callback: CallbackQuery, state: FSMContext):
    item_data = await rq.get_item(callback.data.split('_')[1])
    await state.update_data(item=item_data)
    await callback.answer("")

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    state_data = await state.get_data()
    previous_message_id = state_data.get("last_item_message_id")

    if previous_message_id:
        try:
            await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=previous_message_id)
        except Exception as e:
            pass

    check_user = await rq.get_user_by_id(callback.from_user.id)
    if check_user.is_promo:
        try:
            if not item_data.photo:
                sent_message = await callback.message.answer(f'{item_data.name}\n\n<b>üí∞ –¶–µ–Ω–∞: <s>{item_data.price}</s> {item_data.price - 3000}—Ç–≥ (–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!)</b>\n\n–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n{item_data.description}', 
                                                        parse_mode="HTML",
                                                        reply_markup=kb.buy)
            else:
                sent_message = await callback.message.answer_photo(photo=item_data.photo,
                                                                caption=f'{item_data.name}\n\n<b>üí∞ –¶–µ–Ω–∞: <s>{item_data.price}</s> {item_data.price - 3000}—Ç–≥ (–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!)</b>\n\n–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n{item_data.description}', 
                                                                parse_mode="HTML",
                                                                reply_markup=kb.buy)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
            await state.update_data(last_item_message_id=sent_message.message_id)
        
        except Exception as e:
            return
        
    else:
        try:
            if not item_data.photo:
                sent_message = await callback.message.answer(f'{item_data.name}\n\n<b>üí∞ –¶–µ–Ω–∞: {item_data.price}—Ç–≥</b>\n\n–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n{item_data.description}', 
                                                        parse_mode="HTML",
                                                        reply_markup=kb.buy)
            else:
                sent_message = await callback.message.answer_photo(photo=item_data.photo,
                                                                caption=f'{item_data.name}\n\n<b>üí∞ –¶–µ–Ω–∞: {item_data.price}—Ç–≥</b>\n\n–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n{item_data.description}', 
                                                                parse_mode="HTML",
                                                                reply_markup=kb.buy)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
            await state.update_data(last_item_message_id=sent_message.message_id)
        
        except Exception as e:
            return

        
    
        
@router.callback_query(F.data == 'buy_item')
async def buy(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    item_data = user_data.get('item') 
    await callback.answer("")

    await callback.message.delete()
    check_user = await rq.get_user_by_id(callback.from_user.id)
    if check_user.is_promo:
        try:
            await callback.message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{item_data.name}</b>\n\n–¶–µ–Ω–∞: <s>{item_data.price}</s> <b>{item_data.price - 3000}—Ç–≥</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ',
                                    parse_mode="HTML",
                                    reply_markup=kb.payment_method)
        except:
            return
    else:
        try:
            await callback.message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{item_data.name}</b>\n\n–¶–µ–Ω–∞: <b>{item_data.price}—Ç–≥</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ',
                                    parse_mode="HTML",
                                    reply_markup=kb.payment_method)
        except:
            return
    
    

    
@router.callback_query(F.data == 'halyk')
async def payment_method(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    item_data = user_data.get('item') 
    check_user = await rq.get_user_by_id(callback.from_user.id)
    if check_user.is_promo:
        await callback.message.edit_text(f'–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: [ Halyk Bank ] (KZT)\n\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{item_data.price - 3000}—Ç–≥</b>\n\n–°—á–µ—Ç –•–∞–ª—ã–∫ –ë–∞–Ω–∫:\n<code>4405 6397 2245 8955</code>\n\n–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å –ª—é–±–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã, –Ω–∞ –•–∞–ª—ã–∫ –ë–∞–Ω–∫. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω –∏–ª–∏ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º—è. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É‚ò∫Ô∏è‚≠êÔ∏è\n\n<b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É!</b> üëá',
                                     parse_mode="HTML",
                                     reply_markup=kb.i_paid)
    else:
        await callback.message.edit_text(f'–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: [ Halyk Bank ] (KZT)\n\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{item_data.price}—Ç–≥</b>\n\n–°—á–µ—Ç –•–∞–ª—ã–∫ –ë–∞–Ω–∫:\n<code>4405 6397 2245 8955</code>\n\n–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å –ª—é–±–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã, –Ω–∞ –•–∞–ª—ã–∫ –ë–∞–Ω–∫. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω –∏–ª–∏ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º—è. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É‚ò∫Ô∏è‚≠êÔ∏è\n\n<b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É!</b> üëá',
                                     parse_mode="HTML",
                                     reply_markup=kb.i_paid)
    
@router.callback_query(F.data == 'i_paid_item')
async def proof_payment(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    item_data = user_data.get('item') 
    
    if not item_data:
        await callback.message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(BuyItem.proof)
    
    await callback.message.edit_text(
        f'–û—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.\n–ë–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–∞–π–ª –∏ –≤—ã–¥–∞—Å—Ç –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É',
        parse_mode="HTML",
        reply_markup=kb.i_paid2
    )


@router.message(BuyItem.proof, F.photo | F.document)
async def proof_item(message: Message, state: FSMContext):
    user_data = await state.get_data()
    item_data = user_data.get('item')

    if not item_data:
        await message.reply("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    order_id = await rq.generate_unique_order_id()

    await rq.set_order(item_data, message, order_id)

    check_user = await rq.get_user_by_id(message.from_user.id)

    if message.photo:
        photo_id = message.photo[-1].file_id 
        file = await message.bot.get_file(photo_id)
        file_url = file.file_path
        
        await message.reply(f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω! –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç –≤—ã–¥–∞—Å—Ç –≤–∞–º –º–∞—Ç–µ—Ä–∏–∞–ª –∫:\n<b>{item_data.name}</b>",
                            parse_mode="HTML")
        
        if check_user.is_promo:
            await message.bot.send_photo(
                ADMIN_ID, 
                photo=photo_id, 
                caption=f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{message.from_user.id}</code>\n–ò–º—è: {message.from_user.full_name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\nID –¢–æ–≤–∞—Ä–∞: {item_data.id}\n–¢–æ–≤–∞—Ä: <b>{item_data.name}</b>\n–¶–µ–Ω–∞: <s>{item_data.price}</s> <b>{item_data.price - 3000}—Ç–≥ (–ü—Ä–æ–º–æ–∫–æ–¥: {check_user.promocode})</b>\n\n‚úÖ –ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:\n<code>/confirm_order {order_id}</code>\n\n‚ùå –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:\n<code>/cancel_order {order_id}</code>",
                parse_mode="HTML",
            )
        else:
            await message.bot.send_photo(
                ADMIN_ID, 
                photo=photo_id, 
                caption=f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{message.from_user.id}</code>\n–ò–º—è: {message.from_user.full_name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\nID –¢–æ–≤–∞—Ä–∞: {item_data.id}\n–¢–æ–≤–∞—Ä: <b>{item_data.name}</b>\n–¶–µ–Ω–∞: <b>{item_data.price}—Ç–≥</b>\n\n‚úÖ –ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:\n<code>/confirm_order {order_id}</code>\n\n‚ùå –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:\n<code>/cancel_order {order_id}</code>",
                parse_mode="HTML",
            )

    elif message.document:
        document_id = message.document.file_id
        file = await message.bot.get_file(document_id)
        file_url = file.file_path
        
        await message.reply(f"–§–∞–π–ª –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω! –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç –≤—ã–¥–∞—Å—Ç –≤–∞–º –º–∞—Ç–µ—Ä–∏–∞–ª –∫:\n<b>{item_data.name}</b>",
                            parse_mode="HTML")
        if check_user.is_promo:
            await message.bot.send_document(
                ADMIN_ID,
                document=document_id,
                caption=f"–§–∞–π–ª –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{message.from_user.id}</code>\n–ò–º—è: {message.from_user.full_name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\nID –¢–æ–≤–∞—Ä–∞: {item_data.id}\n–¢–æ–≤–∞—Ä: <b>{item_data.name}</b>\n–¶–µ–Ω–∞: <s>{item_data.price}</s> <b>{item_data.price - 3000}—Ç–≥ (–ü—Ä–æ–º–æ–∫–æ–¥: {check_user.promocode})</b>\n\n‚úÖ –ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:\n<code>/confirm_order {order_id}</code>\n\n‚ùå –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:\n<code>/cancel_order {order_id}</code>",
                parse_mode="HTML"
                )
        else:
            await message.bot.send_document(
                ADMIN_ID,
                document=document_id,
                caption=f"–§–∞–π–ª –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{message.from_user.id}</code>\n–ò–º—è: {message.from_user.full_name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\nID –¢–æ–≤–∞—Ä–∞: {item_data.id}\n–¢–æ–≤–∞—Ä: <b>{item_data.name}</b>\n–¶–µ–Ω–∞: <b>{item_data.price}—Ç–≥</b>\n\n‚úÖ –ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:\n<code>/confirm_order {order_id}</code>\n\n‚ùå –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:\n<code>/cancel_order {order_id}</code>",
                parse_mode="HTML"
                )
    await state.clear()



    
@router.callback_query(F.data == 'back_to_i_paid_halyk')
async def payment_method(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    item_data = user_data.get('item') 
    await callback.message.edit_text(f'–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: [ Halyk Bank ] (KZT)\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{item_data.price}—Ç–≥</b>\n\n–°—á–µ—Ç –•–∞–ª—ã–∫ –ë–∞–Ω–∫:\n<code>2200701015340473</code>\n\n–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å –ª—é–±–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã, –Ω–∞ –•–∞–ª—ã–∫ –ë–∞–Ω–∫. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω –∏–ª–∏ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º—è. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É‚ò∫Ô∏è‚≠êÔ∏è',
                                     parse_mode="HTML",
                                     reply_markup=kb.i_paid)
  
    
@router.callback_query(F.data == 'cancel_to_pay')
async def get_products(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    await callback.message.delete()





@router.callback_query(F.data == 'back_to_products')
async def back_to_products(callback : CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text(text='–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ:', reply_markup=await kb.products())


@router.callback_query(F.data == 'to_main')
async def rules_agree(callback : CallbackQuery):
    await callback.answer('')

    await callback.message.delete()

    await callback.message.answer_photo(photo='AgACAgIAAxkBAAMNZ9IEChbnZcD4iui7Whd_byZsz3gAAqTtMRviKJBKcE2KI1-H-8YBAAMCAAN5AAM2BA',
                        caption='üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.</b>\n\n–í–ø–µ—Ä–≤—ã–µ —É –Ω–∞—Å? –¢–æ–≥–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Å—è üëá\n\n–ú—ã –ø—Ä–æ–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É –ø–æ–ª–µ–∑–Ω—ã –∫–∞–∫ –∏ <b>–¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</b>, —Ç–∞–∫ –∏ <b>–¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –∏ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤</b> –ø–æ <b>–¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º</b>. –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–Ω–∏–∑—É –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é.\n\n<b>üî• –£–¥–∞—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫!</b>',
                         parse_mode="HTML", 
                         reply_markup=kb.main)




















@router.message(F.text == 'üîé –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞')
async def search_item(message : Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É', reply_markup=await kb.search_by_products())


@router.callback_query(F.data.startswith('search_product_'))
async def search_by_product(callback: CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º product_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback'–∞
    product_id = callback.data.split('_')[2]

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ –µ–≥–æ ID
    product = await rq.get_product(product_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω
    if product:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(search_id=product_id)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞
        await state.set_state(SearchItem.search_name)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–æ–º
        await callback.answer("")  # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ
        await callback.message.edit_text(f'<b>–í—ã–±—Ä–∞–Ω–æ: {product.name}</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞',
                                         reply_markup=kb.search,
                                         parse_mode="HTML")
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        await callback.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")

@router.message(SearchItem.search_name)
async def search_name(message: Message, state: FSMContext):
    user_data = await state.get_data()
    product_id = user_data.get('search_id') 


    search_query = message.text.strip()

    search_results = await rq.get_product_item_search(product_id, search_query)

    search_results_list = search_results.all() if hasattr(search_results, 'all') else search_results

    index = 1
    response_text = f"üîç –ù–∞–π–¥–µ–Ω–æ <b>{len(search_results_list)}</b> —Ä–µ–∑—É–ª—å—Ç–∞—Ç(–æ–≤) –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n\n"
    for item in search_results_list:
        response_text += f"<b>{index}.</b> {item.name}\n"
        index += 1
        
    await message.answer(response_text, parse_mode="HTML",reply_markup=await kb.searched_items(product_id,search_query))
    
    await state.clear()




@router.callback_query(F.data == "search_all_catalog")
async def search_items_by_all_catalog(callback : CallbackQuery, state : FSMContext):
    await state.set_state(SearchAllItem.search_name_all)
    await callback.message.edit_text("<b>–í—ã–±—Ä–∞–Ω–æ: –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–∞—Ç–∞–ª–æ–≥–∞–º</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞",
                                     reply_markup=kb.search,
                                     parse_mode="HTML")

@router.message(SearchAllItem.search_name_all)
async def search_name_all(message : Message, state : FSMContext):
    search_query = message.text.strip()

    search_results = await rq.get_product_item_search_all(search_query)

    search_results_list = search_results.all() if hasattr(search_results, 'all') else search_results

    index = 1
    response_text = f"üîç –ù–∞–π–¥–µ–Ω–æ <b>{len(search_results_list)}</b> —Ä–µ–∑—É–ª—å—Ç–∞—Ç(–æ–≤) –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n\n"
    for item in search_results_list:
        response_text += f"<b>{index}.</b> {item.name}\n"
        index += 1

    await message.answer(response_text, parse_mode="HTML",reply_markup=await kb.searched_items_all(search_query))
 
    await state.clear()

@router.callback_query(F.data == "back_to_search")
async def back_to_search(callback : CallbackQuery, state : FSMContext):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É', reply_markup=await kb.search_by_products())
    await state.clear()
    

@router.callback_query(F.data.startswith('searched_item_'))
async def item(callback: CallbackQuery, state: FSMContext):
    item_data = await rq.get_item(callback.data.split('_')[2])
    await state.update_data(item=item_data)
    await callback.answer("")

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    state_data = await state.get_data()
    previous_message_id = state_data.get("last_item_message_id")

    if previous_message_id:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=previous_message_id)
        except Exception as e:
            pass

    check_user = await rq.get_user_by_id(callback.from_user.id)

    if check_user.is_promo:
        try:
            if not item_data.photo:
                sent_message = await callback.message.answer(f'{item_data.name}\n\n<b>üí∞ –¶–µ–Ω–∞: <s>{item_data.price}</s> {item_data.price - 3000}—Ç–≥ (–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!)</b>\n\n–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n{item_data.description}', 
                                                        parse_mode="HTML",
                                                        reply_markup=kb.buy)
            else:
                sent_message = await callback.message.answer_photo(photo=item_data.photo,
                                                                caption=f'{item_data.name}\n\n<b>üí∞ –¶–µ–Ω–∞: <s>{item_data.price}</s> {item_data.price - 3000}—Ç–≥ (–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!)</b>\n\n–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n{item_data.description}', 
                                                                parse_mode="HTML",
                                                                reply_markup=kb.buy)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
            await state.update_data(last_item_message_id=sent_message.message_id)
        
        except Exception as e:
            return
    else:
        try:
            if not item_data.photo:
                sent_message = await callback.message.answer(f'{item_data.name}\n\n<b>üí∞ –¶–µ–Ω–∞: {item_data.price}—Ç–≥</b>\n\n–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n{item_data.description}', 
                                                        parse_mode="HTML",
                                                        reply_markup=kb.buy)
            else:
                sent_message = await callback.message.answer_photo(photo=item_data.photo,
                                                                caption=f'{item_data.name}\n\n<b>üí∞ –¶–µ–Ω–∞: {item_data.price}—Ç–≥</b>\n\n–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n{item_data.description}', 
                                                                parse_mode="HTML",
                                                                reply_markup=kb.buy)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
            await state.update_data(last_item_message_id=sent_message.message_id)
        
        except Exception as e:
            return










@router.message(F.text == '–ö–∞–∫ –¥–µ–ª–∞?')
async def how_are_you(message : Message):
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, –∞ —É –≤–∞—Å?')

@router.message(F.text == "–•–æ—Ä–æ—à–æ")
async def good(message : Message):
    await message.answer('–†–∞–¥ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å üòÑ')

@router.message(F.text == "–û—Ç–ª–∏—á–Ω–æ")
async def good(message : Message):
    await message.answer('–†–∞–¥ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å üòÑ')

@router.message(F.text == "–ö—Ä—É—Ç–æ")
async def good(message : Message):
    await message.answer('–†–∞–¥ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å üòÑ')









@router.message(F.text == 'üìã –ü—Ä–∞–≤–∏–ª–∞')
async def get_rule(message : Message):
    await message.answer(text='<b>1. –ü—Ä–∞–≤–∏–ª–∞ –∑–∞–º–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞</b>\n\n1.1 –ó–∞–º–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏:\n‚ö™Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª. (–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞)\n‚ö™Ô∏è –¢–æ–≤–∞—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—é.\n‚ö™Ô∏è –ù–∞ —Ç–æ–≤–∞—Ä –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏—è\n‚ö™Ô∏è –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –í–∞–º —É–∂–µ –æ–∫–∞–∑–∞–ª–∏ —É—Å–ª—É–≥—É –∑–∞–º–µ–Ω—ã –≤ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Å—Ä–æ–∫ —Ç–æ–≤–∞—Ä–∞, —Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Ä–∞–∑ –æ–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∑–∞–º–µ–Ω—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è.\n\n1.2 –ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥–∏ –∑–∞–º–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:\n‚ö™Ô∏è –í–∏–¥–µ–æ–∑–∞–ø–∏—Å—å –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–µ—Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–≤–∞—Ä–∞.\n‚ö™Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Å—Ä–æ–∫ –¥–ª—è –∑–∞–º–µ–Ω—ã - 12 —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ.\n\n<b>2. –ü—Ä–∞–≤–∏–ª–∞ –∏ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.</b>\n\n2.1 –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã:\n‚ö™Ô∏è –í–µ—Ä–Ω—É—Ç—å, –æ–±–º–µ–Ω—è—Ç—å —Ç–æ–≤–∞—Ä, –µ—Å–ª–∏ –æ–Ω –≤–∞–º –∫–∞–∫-—Ç–æ –Ω–µ –ø–æ–¥–æ—à–µ–ª, –Ω–µ –∑–∞—à–µ–ª –∏ –ø—Ä–æ—á–µ–µ - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.\n‚ö™Ô∏è –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ —Ç–æ–≤–∞—Ä –∏ —Ç–æ–≤–∞—Ä –≤–∞–º –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª (–Ω–µ —É—Å–ø–µ–ª–∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å), –¥–µ–Ω—å–≥–∏ –∑–∞ –Ω–µ–≥–æ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å 30% –∫–æ–º–∏—Å—Å–∏–µ–π.\n‚ö™Ô∏è –í —Å–ª—É—á–∞–µ –æ–±–º–∞–Ω–∞ —Å –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã - –æ—Ç–∫–∞–∑ –≤ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ, –∑–∞–º–µ–Ω–µ. –ò—Ç–æ–≥ - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ.\n‚ö™Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≤–ø—Ä–∞–≤–µ –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∫–ª–∏–µ–Ω—Ç—É –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω.\n‚ö™Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è.\n‚ö™Ô∏è –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ –≤–ª–µ—á–µ—Ç –∑–∞ —Å–æ–±–æ–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤–ª–∞—Å—Ç—è–º–∏, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—Ä–∞–π–≤–µ—Ä–æ–≤ –∏ —Ç.–¥.)\n‚ö™Ô∏è –°–æ–≤–µ—Ä—à–∞—è –ø–æ–∫—É–ø–∫—É –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å–æ –í–°–ï–ú–ò –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–µ—Ä–≤–∏—Å–∞.\n\n<b>3. –ú–∞–≥–∞–∑–∏–Ω</b> @itdeals_bot <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ê–ï–¢!</b>\n‚ö™Ô∏è –ú–∞–≥–∞–∑–∏–Ω @itdeals_bot –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–∑–ª–∞–º—ã–≤–∞–µ—Ç, –Ω–µ –æ–±–º–∞–Ω—ã–≤–∞–µ—Ç, –Ω–∏–∫–∞–∫ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤. –ú–∞–≥–∞–∑–∏–Ω @itdeals_bot —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –ø—Ä–æ–¥–∞–µ—Ç (–Ω–µ –Ω–µ—Å—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏), –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—è, —á—Ç–æ –≤ —Å–ª—É—á–∞–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è, –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è, –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–∏–±–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—É–ø–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.',
                         parse_mode="HTML")


@router.message(F.text == 'üí¨ –ü–æ–º–æ—â—å')
async def get_help(message : Message):
    await message.answer(text="‚ù§Ô∏è‚Äçüî• <b>–≠—Ç–∏ —Å–æ–≤–µ—Ç—ã —Ç–µ–±–µ –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è!</b>\n\nüéì <b>–ö–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å–æ–≤</b> üéì\n–í—ã–±–∏—Ä–∞–π—Ç–µ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ <b>–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö</b> –∏ <b>–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤</b>, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º <b>–ø—Ä–æ–∫–∞—á–∞—Ç—å –Ω–∞–≤—ã–∫–∏</b>, <b>–æ—Å–≤–æ–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é</b> –∏–ª–∏ <b>—É–ª—É—á—à–∏—Ç—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é</b>.\n<b>–ì–∏–±–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏</b> ‚Äì –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å–ø–µ—Ö–∞!\n\n–ú—ã –ø–æ–∫—É–ø–∞–µ–º <b>–¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</b>, –∏ –ø—Ä–æ–¥–∞—ë–º –∏—Ö –∑–∞ <b>–±–æ–ª–µ–µ –Ω–∏–∑–∫—É—é —Ü–µ–Ω—É</b> —á–µ–º —É –∏—Ö –∞–≤—Ç–æ—Ä–æ–≤, –Ω–æ –Ω–∞ <b>–±–æ–ª–µ–µ –æ–±—à–∏—Ä–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é!</b> üòé\n\nüóÇÔ∏è <b>–ì–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã</b> üóÇÔ∏è\n<b>–ù–∞–¥–æ–µ–ª–æ —Å–∏–¥–µ—Ç—å –∏ –¥–µ–ª–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã —Ü–µ–ª—É—é –Ω–µ–¥–µ–ª—é –∏–ª–∏ –º–µ—Å—è—Ü?</b>\n\n–ù–∞—à–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ <b>–∫—Ä—É—Ç—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤</b> –∏ –≥–æ—Ç–æ–≤—ã –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –Ω–∞—Ä–∞–±–æ—Ç–∫–∞–º–∏! <b>–≠–∫–æ–Ω–æ–º—å—Ç–µ –≤—Ä–µ–º—è –∏ —Ä–µ—Å—É—Ä—Å—ã</b>, –∏—Å–ø–æ–ª—å–∑—É—è <b>–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ</b> –∏ <b>–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ</b> —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤–Ω–µ–¥—Ä–∏—Ç—å –≤ —Ä–∞–±–æ—Ç—É.\n<b>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏</b> ‚Äì –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞! üî•\n\nüìö <b>–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</b> üìö\n–ù–∞—à–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–ª–∏ –∏ —Å–æ–±—Ä–∞–ª–∏ <b>—Ü–µ–Ω–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</b>, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –±—ã—Å—Ç—Ä–µ–µ –æ—Å–≤–æ–∏—Ç—å <b>–Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏</b>.\n<b>–ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏</b> ‚Äì –≤—Å—ë –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ! –£—á–∏—Ç–µ—Å—å —Å —É–¥–æ–±—Å—Ç–≤–æ–º –∏ –ø—Ä–∏–º–µ–Ω—è–π—Ç–µ –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ. üöÄ\n\n<b>–ü–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?</b> –ë–æ—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - @helpme_line\n\n<b>–í–µ—Å—å –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç—Ä–æ–≥–æ –≤ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö!</b>",
                         parse_mode="HTML")
    




@router.message(F.text == 'üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥')
async def use_promocode(message : Message, state : FSMContext):
    
    get_user = await rq.get_user_by_id(message.from_user.id)
    if get_user.was_promo:
        await message.answer(text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
        return
    else:
        await state.set_state(Promocode.promocode)
        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥")
    

@router.message(Promocode.promocode)
async def check_promo(message : Message, state : FSMContext):
    await state.update_data(promocode=message.text)

    code = await rq.get_promo(message.text)

    if code:
        if code.is_active:
            await rq.set_promo_used_count(message.text)
            await rq.set_user_used_promo(message.from_user.id,message.text)
            await message.answer(text=f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {code.discount}—Ç–≥ –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞!")
            
        else:
            await message.answer("–î–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
    else:
        await message.answer(text="–î–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    await state.clear()


@router.message(F.text == "SPRING2025")
async def check_promo_message(message : Message):
    code = await rq.get_promo(message.text)
    get_user = await rq.get_user_by_id(message.from_user.id)
    if get_user.was_promo:
        await message.answer(text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
        return
    else:
        if code.is_active:
            await rq.set_promo_used_count(message.text)
            await rq.set_user_used_promo(message.from_user.id,message.text)
            await message.answer(text=f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {code.discount}—Ç–≥ –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞!\n\n<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä –ø–æ —Å–∫–∏–¥–∫–µ!</b>",
                                 parse_mode="HTML")

            await message.bot.send_message(
                ADMIN_ID, 
                text=f"–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥\n\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{message.from_user.id}</code>\n–ò–º—è: {message.from_user.full_name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n–ü—Ä–æ–º–æ–∫–æ–¥: <b>{message.text}</b>",
                parse_mode="HTML",
            )
        else:
            await message.answer("–î–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")

@router.message(F.text == "DL2025")
async def check_promo_message(message : Message):
    code = await rq.get_promo(message.text)
    get_user = await rq.get_user_by_id(message.from_user.id)
    if get_user.was_promo:
        await message.answer(text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
        return
    else:
        if code.is_active:
            await rq.set_promo_used_count(message.text)
            await rq.set_user_used_promo(message.from_user.id,message.text)
            await message.answer(text=f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {code.discount}—Ç–≥ –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞!\n\n<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä –ø–æ —Å–∫–∏–¥–∫–µ!</b>",
                                 parse_mode="HTML")

            await message.bot.send_message(
                ADMIN_ID, 
                text=f"–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥\n\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{message.from_user.id}</code>\n–ò–º—è: {message.from_user.full_name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n–ü—Ä–æ–º–æ–∫–æ–¥: <b>{message.text}</b>",
                parse_mode="HTML",
            )
        else:
            await message.answer("–î–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")

@router.message(F.text == "PYPSIK")
async def check_promo_message(message : Message):
    code = await rq.get_promo(message.text)
    get_user = await rq.get_user_by_id(message.from_user.id)
    if get_user.was_promo:
        await message.answer(text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
        return
    else:
        if code.is_active:
            await rq.set_promo_used_count(message.text)
            await rq.set_user_used_promo(message.from_user.id,message.text)
            await message.answer(text=f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {code.discount}—Ç–≥ –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞!\n\n<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä –ø–æ —Å–∫–∏–¥–∫–µ!</b>",
                                 parse_mode="HTML")

            await message.bot.send_message(
                ADMIN_ID, 
                text=f"–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥\n\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{message.from_user.id}</code>\n–ò–º—è: {message.from_user.full_name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n–ü—Ä–æ–º–æ–∫–æ–¥: <b>{message.text}</b>",
                parse_mode="HTML",
            )
        else:
            await message.answer("–î–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
